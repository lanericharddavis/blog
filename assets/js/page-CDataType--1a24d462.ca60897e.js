(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{471:function(e,t,a){"use strict";a.r(t);var r=a(2),s=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"c-data-type"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#c-data-type"}},[e._v("#")]),e._v(" C# Data Type")]),e._v(" "),a("h2",{attrs:{id:"what-are-the-three-categories-of-data-types-how-are-they-different"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#what-are-the-three-categories-of-data-types-how-are-they-different"}},[e._v("#")]),e._v(" What are the three categories of data types? How are they different?")]),e._v(" "),a("ol",[a("li",[e._v("Value type: If a data value can be held within it's own memory space.  Variables of these data types directly contain values.\nExamples of value types are:\nbool, byte, char, decimal, double, enum, float, int, long, sbyte, short, struct, uint, ulong, ushort.")]),e._v(" "),a("li",[e._v("Reference type: A reference type does not store it's value directly.  It stores the reference address where the value is being stored.\nExamples of reference types are:\nstring, class, arrays, delegate")]),e._v(" "),a("li",[e._v("Pointer type:  Can be either a type or void.  These options are called referent types.  A pointer cannot point to a reference or to a struct that contains references.")])]),e._v(" "),a("h2",{attrs:{id:"what-are-the-value-type-data-types-what-differences-do-you-notice-from-javascript"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#what-are-the-value-type-data-types-what-differences-do-you-notice-from-javascript"}},[e._v("#")]),e._v(" What are the Value-type data types? What differences do you notice from JavaScript?")]),e._v(" "),a("p",[e._v("bool, byte, char, decimal, double, enum, float, int, long, sbyte, short, struct, uint, ulong, ushort.")]),e._v(" "),a("p",[e._v("There are a lot more options, mainly because C# is strictly type based language so data types need to be specified better than how they are in JavaScript.")]),e._v(" "),a("h2",{attrs:{id:"in-your-own-words-how-do-reference-types-get-stored-in-memory-how-does-this-differ-from-value-types"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#in-your-own-words-how-do-reference-types-get-stored-in-memory-how-does-this-differ-from-value-types"}},[e._v("#")]),e._v(" In your own words how do Reference types get stored in memory? How does this differ from Value types?")]),e._v(" "),a("p",[e._v("A reference type is essentially storing a placeholder for the key, that placeholder is assigned a specific spot in memory, then the value to that key is then assigned a different spot in memory, so in order to access the value, you need to first get the placeholder which is the key for that value.")]),e._v(" "),a("p",[e._v("This differs from a value type because value type's value is directly stored on the variable.")]),e._v(" "),a("h2",{attrs:{id:"link-to-afternoon-challenge-rock-paper-scissors-in-c"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#link-to-afternoon-challenge-rock-paper-scissors-in-c"}},[e._v("#")]),e._v(" Link to afternoon challenge | Rock Paper Scissors in C#:")]),e._v(" "),a("p",[e._v("https://lanericharddavis.github.io/rockpaperscissors/")])])}),[],!1,null,null,null);t.default=s.exports}}]);